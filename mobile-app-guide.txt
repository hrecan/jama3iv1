GUIDE DE TRANSFORMATION EN APPLICATION MOBILE
=========================================

1. ÉTAPE 1 : TRANSFORMER EN PWA
------------------------------

1.1 Créer le manifest.json
-------------------------
Créer le fichier : public/manifest.json
{
  "name": "JAMA3I",
  "short_name": "JAMA3I",
  "description": "Votre compagnon musulman",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#2E7D32",
  "icons": [
    {
      "src": "icons/icon-72x72.png",
      "sizes": "72x72",
      "type": "image/png"
    },
    {
      "src": "icons/icon-96x96.png",
      "sizes": "96x96",
      "type": "image/png"
    },
    {
      "src": "icons/icon-128x128.png",
      "sizes": "128x128",
      "type": "image/png"
    },
    {
      "src": "icons/icon-144x144.png",
      "sizes": "144x144",
      "type": "image/png"
    },
    {
      "src": "icons/icon-152x152.png",
      "sizes": "152x152",
      "type": "image/png"
    },
    {
      "src": "icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icons/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png"
    },
    {
      "src": "icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}

1.2 Créer le Service Worker
--------------------------
Créer le fichier : public/sw.js
// Cache statique
const CACHE_NAME = 'jama3i-v1';
const STATIC_CACHE = [
  '/',
  '/index.html',
  '/css/style.css',
  '/css/quran.css',
  '/js/app.js',
  // Ajouter tous vos fichiers statiques
];

// Installation du Service Worker
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(STATIC_CACHE);
    })
  );
});

// Stratégie de cache : Network First, puis cache
self.addEventListener('fetch', (event) => {
  event.respondWith(
    fetch(event.request)
      .catch(() => {
        return caches.match(event.request);
      })
  );
});

1.3 Modifier index.html
----------------------
Ajouter dans le <head> :
<link rel="manifest" href="/manifest.json">
<meta name="theme-color" content="#2E7D32">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="apple-mobile-web-app-title" content="JAMA3I">

Ajouter à la fin du body :
<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js');
  }
</script>

2. ÉTAPE 2 : UTILISER CAPACITOR
------------------------------

2.1 Installation de Capacitor
----------------------------
npm init
npm install @capacitor/core @capacitor/cli
npx cap init JAMA3I com.jama3i.app
npm install @capacitor/android @capacitor/ios

2.2 Configuration de Capacitor
----------------------------
Créer le fichier : capacitor.config.json
{
  "appId": "com.jama3i.app",
  "appName": "JAMA3I",
  "webDir": "public",
  "bundledWebRuntime": false,
  "plugins": {
    "SplashScreen": {
      "launchShowDuration": 2000
    },
    "PushNotifications": {
      "presentationOptions": ["badge", "sound", "alert"]
    }
  }
}

2.3 Ajouter les plateformes
--------------------------
npx cap add android
npx cap add ios

3. OPTIMISATIONS MOBILES
-----------------------

3.1 CSS Mobile-First
-------------------
Modifier style.css pour ajouter :
* {
  -webkit-tap-highlight-color: transparent;
  touch-action: manipulation;
}

.app-container {
  overscroll-behavior: none;
  -webkit-overflow-scrolling: touch;
}

3.2 Gestion du Offline
---------------------
- Implémenter IndexedDB pour le stockage local
- Mettre en cache les sourates consultées
- Sauvegarder les préférences utilisateur

3.3 Fonctionnalités Natives
--------------------------
Installer les plugins Capacitor nécessaires :
npm install @capacitor/geolocation
npm install @capacitor/local-notifications
npm install @capacitor/share
npm install @capacitor/storage

4. COMPILATION ET DÉPLOIEMENT
---------------------------

4.1 Android
----------
- Installer Android Studio
- npx cap open android
- Construire l'APK depuis Android Studio

4.2 iOS
-------
- Installer Xcode (Mac uniquement)
- npx cap open ios
- Construire l'app depuis Xcode

5. FONCTIONNALITÉS À IMPLÉMENTER
------------------------------

5.1 Notifications Push
--------------------
- Horaires de prière
- Nouveaux cours disponibles
- Rappels personnalisés

5.2 Stockage Hors-ligne
----------------------
- Sourates favorites
- Cours téléchargés
- Historique de lecture

5.3 Fonctionnalités Mobiles
--------------------------
- Partage de versets
- Qibla Finder
- Scanner de QR Code
- Calendrier islamique

6. OPTIMISATIONS DE PERFORMANCE
-----------------------------

6.1 Images et Médias
------------------
- Utiliser des images WebP
- Lazy loading des images
- Compression des assets

6.2 JavaScript
------------
- Code splitting
- Lazy loading des modules
- Minification du code

6.3 Animations
------------
- Utiliser requestAnimationFrame
- Optimiser les transitions CSS
- Éviter le reflow

7. TESTS
--------
- Tester sur différents appareils
- Vérifier la réactivité
- Tester hors-ligne
- Vérifier les performances
